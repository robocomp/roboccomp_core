// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file cadenaPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>
#include <fastrtps/Domain.h>

#include "dsrpublisher.h"


#include <QDebug>

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

DSRPublisher::DSRPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

DSRPublisher::~DSRPublisher()= default;

bool DSRPublisher::init(eprosima::fastrtps::Participant *mp_participant_, const char* topicName, const char* topicDataType)
{
    mp_participant = mp_participant_;

    // Create Publisher
    eprosima::fastrtps::PublisherAttributes Wparam;
    Wparam.topic.topicKind = eprosima::fastrtps::rtps::NO_KEY;
    Wparam.topic.topicDataType = topicDataType;  //This type MUST be registered
    Wparam.topic.topicName = topicName;
    eprosima::fastrtps::rtps::Locator_t locator;
    eprosima::fastrtps::rtps::IPLocator::setIPv4(locator, 239, 255, 0, 1);
    locator.port = 7900;
    Wparam.multicastLocatorList.push_back(locator);
    Wparam.qos.m_reliability.kind = eprosima::fastrtps::RELIABLE_RELIABILITY_QOS;
    Wparam.qos.m_publishMode.kind = eprosima::fastrtps::ASYNCHRONOUS_PUBLISH_MODE;
    Wparam.qos.m_durability.kind = eprosima::fastrtps::VOLATILE_DURABILITY_QOS;


    Wparam.topic.historyQos.kind = KEEP_ALL_HISTORY_QOS;
    //Wparam.topic.historyQos.kind = KEEP_LAST_HISTORY_QOS;
    //Wparam.topic.historyQos.depth = 20; // Adjust this value if we are losing  messages

        // Check ACK for sended messages.
    Wparam.times.heartbeatPeriod.seconds = 0;
    Wparam.times.heartbeatPeriod.nanosec = 150000000; //150 ms

    Wparam.topic.resourceLimitsQos.max_samples = 200;
    //}
    Wparam.historyMemoryPolicy = DYNAMIC_RESERVE_MEMORY_MODE; //PREALLOCATED_WITH_REALLOC_MEMORY_MODE;
    mp_publisher = eprosima::fastrtps::Domain::createPublisher(mp_participant, Wparam,
                                                               static_cast<eprosima::fastrtps::PublisherListener *>(&m_listener));

    if (mp_publisher == nullptr)
        return false;
    qDebug() << "Publisher created, waiting for Subscribers." ;
    return true;
}

eprosima::fastrtps::rtps::GUID_t DSRPublisher::getParticipantID() const
{
    return mp_participant->getGuid();
}


bool DSRPublisher::write(IDL::Mvreg *object)
{
    while (true) {
        if (mp_publisher->write(object)) break;
    }
    return true;
};

bool DSRPublisher::write(IDL::MvregNodeAttr *object)
{
    while (true) {
        if (mp_publisher->write(object)) break;
    }
    return true;
};

bool DSRPublisher::write(IDL::MvregEdge *object)
{
    while (true) {
        if (mp_publisher->write(object)) break;
    }
    return true;
};

bool DSRPublisher::write(IDL::MvregEdgeAttr *object)
{
    while (true) {
        if (mp_publisher->write(object)) break;
    }
    return true;
};

bool DSRPublisher::write(IDL::OrMap *object)
{
    while (true) {
        if (mp_publisher->write(object)) break;
    }
    return true;
};

bool DSRPublisher::write(IDL::GraphRequest *object)
{
    while (true) {
        if (mp_publisher->write(object)) break;
    }
    return true;
};

void DSRPublisher::PubListener::onPublicationMatched(eprosima::fastrtps::Publisher *pub,
                                                     eprosima::fastrtps::rtps::MatchingInfo &info)
{
    if (info.status == eprosima::fastrtps::rtps::MATCHED_MATCHING) {
        n_matched++;
        qDebug() << "Publisher [" << pub->getAttributes().topic.getTopicName() <<"] matched " << info.remoteEndpointGuid.entityId.value;
    } else {
        n_matched--;
        qDebug() << "Publisher [" << pub->getAttributes().topic.getTopicName() <<"] unmatched" << info.remoteEndpointGuid.entityId.value;
    }
}
