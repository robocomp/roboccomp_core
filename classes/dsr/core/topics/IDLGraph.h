// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DSRGraph.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DSRGRAPH_H_
#define _DSRGRAPH_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DSRGraph_SOURCE)
#define DSRGraph_DllAPI __declspec( dllexport )
#else
#define DSRGraph_DllAPI __declspec( dllimport )
#endif // DSRGraph_SOURCE
#else
#define DSRGraph_DllAPI
#endif
#else
#define DSRGraph_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace IDL {
/*!
 * @brief This class represents the union Val defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class Val {
    public:


        bool operator<(const Val &rhs) const {

            if (m__d != rhs.m__d) return false;

            switch (m__d) {
                case 0:
                    return m_str < rhs.m_str;
                case 1:
                    return m_dec < rhs.m_dec;
                case 2:
                    return m_fl < rhs.m_fl;
                case 3:
                    return m_float_vec < rhs.m_float_vec;
                case 4:
                    return m_bl < rhs.m_bl;
                case 5:
                    return m_byte_vec < rhs.m_byte_vec;
                case 6:
                    return m_byte_vec < rhs.m_byte_vec;
                default:
                    return false;
            }
        }

        bool operator>(const Val &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const Val &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const Val &rhs) const {
            return !(*this < rhs);
        }

        bool operator==(const Val &rhs) const {

            if (m__d != rhs.m__d) return false;

            switch (m__d) {
                case 0:
                    return m_str == rhs.m_str;
                case 1:
                    return m_dec == rhs.m_dec;
                case 2:
                    return m_fl == rhs.m_fl;
                case 3:
                    return m_float_vec == rhs.m_float_vec;
                case 4:
                    return m_bl == rhs.m_bl;
                case 5:
                    return m_byte_vec == rhs.m_byte_vec;
                default:
                    return false;
            }
        }

        bool operator!=(const Val &rhs) const {
            return !(operator==(rhs));
        }
        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Val();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Val();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Val that will be copied.
         */
        eProsima_user_DllExport Val(const Val &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Val that will be copied.
         */
        eProsima_user_DllExport Val(Val &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Val that will be copied.
         */
        eProsima_user_DllExport Val &operator=(const Val &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Val that will be copied.
         */
        eProsima_user_DllExport Val &operator=(Val &&x);

        /*!
         * @brief This function sets the discriminator value.
         * @param __d New value for the discriminator.
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
         */
        eProsima_user_DllExport void _d(int32_t __d);

        /*!
         * @brief This function returns the value of the discriminator.
         * @return Value of the discriminator
         */
        eProsima_user_DllExport int32_t _d() const;

        /*!
         * @brief This function returns a reference to the discriminator.
         * @return Reference to the discriminator.
         */
        eProsima_user_DllExport int32_t &_d();

        /*!
         * @brief This function copies the value in member str
         * @param _str New value to be copied in member str
         */
        eProsima_user_DllExport void str(const std::string &_str);

        /*!
         * @brief This function moves the value in member str
         * @param _str New value to be moved in member str
         */
        eProsima_user_DllExport void str(std::string &&_str);

        /*!
         * @brief This function returns a constant reference to member str
         * @return Constant reference to member str
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport const std::string &str() const;

        /*!
         * @brief This function returns a reference to member str
         * @return Reference to member str
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport std::string &str();
        /*!
         * @brief This function sets a value in member dec
         * @param _dec New value for member dec
         */
        eProsima_user_DllExport void dec(int32_t _dec);

        /*!
         * @brief This function returns the value of member dec
         * @return Value of member dec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport int32_t dec() const;

        /*!
         * @brief This function returns a reference to member uint
         * @return Reference to member dec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport int32_t &dec();


        eProsima_user_DllExport void uint(uint32_t _uint);

        /*!
         * @brief This function returns the value of member uint
         * @return Value of member dec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport uint32_t uint() const;

        /*!
         * @brief This function returns a reference to member uint
         * @return Reference to member uint
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport uint32_t &uint();

        /*!
         * @brief This function sets a value in member fl
         * @param _fl New value for member fl
         */
        eProsima_user_DllExport void fl(float _fl);

        /*!
         * @brief This function returns the value of member fl
         * @return Value of member fl
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport float fl() const;

        /*!
         * @brief This function returns a reference to member fl
         * @return Reference to member fl
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport float &fl();

        /*!
         * @brief This function copies the value in member float_vec
         * @param _float_vec New value to be copied in member float_vec
         */
        eProsima_user_DllExport void float_vec(const std::vector<float> &_float_vec);

        /*!
         * @brief This function moves the value in member float_vec
         * @param _float_vec New value to be moved in member float_vec
         */
        eProsima_user_DllExport void float_vec(std::vector<float> &&_float_vec);

        /*!
         * @brief This function returns a constant reference to member float_vec
         * @return Constant reference to member float_vec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport const std::vector<float> &float_vec() const;

        /*!
         * @brief This function returns a reference to member float_vec
         * @return Reference to member float_vec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport std::vector<float> &float_vec();
        /*!
         * @brief This function sets a value in member bl
         * @param _bl New value for member bl
         */
        eProsima_user_DllExport void bl(bool _bl);

        /*!
         * @brief This function returns the value of member bl
         * @return Value of member bl
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport bool bl() const;

        /*!
         * @brief This function returns a reference to member bl
         * @return Reference to member bl
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport bool &bl();

        /*!
         * @brief This function copies the value in member byte_vec
         * @param _byte_vec New value to be copied in member byte_vec
         */
        eProsima_user_DllExport void byte_vec(const std::vector<uint8_t> &_byte_vec);

        /*!
         * @brief This function moves the value in member byte_vec
         * @param _byte_vec New value to be moved in member byte_vec
         */
        eProsima_user_DllExport void byte_vec(std::vector<uint8_t> &&_byte_vec);

        /*!
         * @brief This function returns a constant reference to member byte_vec
         * @return Constant reference to member byte_vec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport const std::vector<uint8_t> &byte_vec() const;

        /*!
         * @brief This function returns a reference to member byte_vec
         * @return Reference to member byte_vec
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport std::vector<uint8_t> &byte_vec();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const Val &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);


    private:
        int32_t m__d;

        std::string m_str;
        int32_t m_dec;
        float m_fl;
        std::vector<float> m_float_vec;
        bool m_bl;
        std::vector<uint8_t> m_byte_vec;
        uint32_t m_uint;
    };

/*!
 * @brief This class represents the enumeration Types defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    enum Types : uint32_t {
        STRING,
        INT,
        FLOAT,
        FLOAT_VEC,
        BOOL,
        BYTE_VEC
    };

/*!
 * @brief This class represents the structure Attrib defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class Attrib {
    public:


        bool operator==(const Attrib &av_) const {
            if (this == &av_) {
                return true;
            }
            return !(type() != av_.type() || value() != av_.value() || timestamp() != av_.timestamp());
        }

        bool operator<(const Attrib &av_) const {
            if (this == &av_) {
                return false;
            }
            if (value() < av_.value()) {
                return true;
            } else if (av_.value() < value()) {
                return false;
            }
            return false;
        }

        bool operator!=(const Attrib &av_) const {
            return !operator==(av_);
        }

        bool operator<=(const Attrib &av_) const {
            return operator<(av_) || operator==(av_);
        }

        bool operator>(const Attrib &av_) const {
            return !operator<(av_) && !operator==(av_);
        }

        bool operator>=(const Attrib &av_) const {
            return !operator<(av_);
        }
        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Attrib();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Attrib();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Attrib that will be copied.
         */
        eProsima_user_DllExport Attrib(const Attrib &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Attrib that will be copied.
         */
        eProsima_user_DllExport Attrib(Attrib &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Attrib that will be copied.
         */
        eProsima_user_DllExport Attrib &operator=(const Attrib &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Attrib that will be copied.
         */
        eProsima_user_DllExport Attrib &operator=(Attrib &&x);

        /*!
         * @brief This function sets a value in member type
         * @param _type New value for member type
         */
        eProsima_user_DllExport void type(uint32_t _type);

        /*!
         * @brief This function returns the value of member type
         * @return Value of member type
         */
        eProsima_user_DllExport uint32_t type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport uint32_t &type();

        /*!
         * @brief This function copies the value in member value
         * @param _value New value to be copied in member value
         */
        eProsima_user_DllExport void value(const Val &_value);

        /*!
         * @brief This function moves the value in member value
         * @param _value New value to be moved in member value
         */
        eProsima_user_DllExport void value(Val &&_value);

        /*!
         * @brief This function returns a constant reference to member value
         * @return Constant reference to member value
         */
        eProsima_user_DllExport const Val &value() const;

        /*!
         * @brief This function returns a reference to member value
         * @return Reference to member value
         */
        eProsima_user_DllExport Val &value();
        /*!
         * @brief This function sets a value in member timestamp
         * @param _timestamp New value for member timestamp
         */
        eProsima_user_DllExport void timestamp(uint64_t _timestamp);

        /*!
         * @brief This function returns the value of member timestamp
         * @return Value of member timestamp
         */
        eProsima_user_DllExport uint64_t timestamp() const;

        /*!
         * @brief This function returns a reference to member timestamp
         * @return Reference to member timestamp
         */
        eProsima_user_DllExport uint64_t &timestamp();

        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const Attrib &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_type;
        Val m_value;
        uint64_t m_timestamp;
        uint32_t m_agent_id;
    };

/*!
 * @brief This class represents the structure PairInt defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class PairInt {
    public:

        bool operator==(const PairInt &rhs) const {
            return m_first == rhs.m_first &&
                   m_second == rhs.m_second;
        }

        bool operator!=(const PairInt &rhs) const {
            return !(rhs == *this);
        }

        bool operator<(const PairInt &rhs) const {
            if (m_first < rhs.m_first)
                return true;
            if (rhs.m_first < m_first)
                return false;
            return m_second < rhs.m_second;
        }

        bool operator>(const PairInt &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const PairInt &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const PairInt &rhs) const {
            return !(*this < rhs);
        }
        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport PairInt();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~PairInt();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object PairInt that will be copied.
         */
        eProsima_user_DllExport PairInt(const PairInt &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object PairInt that will be copied.
         */
        eProsima_user_DllExport PairInt(PairInt &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object PairInt that will be copied.
         */
        eProsima_user_DllExport PairInt &operator=(const PairInt &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object PairInt that will be copied.
         */
        eProsima_user_DllExport PairInt &operator=(PairInt &&x);

        /*!
         * @brief This function sets a value in member first
         * @param _first New value for member first
         */
        eProsima_user_DllExport void first(uint32_t _first);

        /*!
         * @brief This function returns the value of member first
         * @return Value of member first
         */
        eProsima_user_DllExport uint32_t first() const;

        /*!
         * @brief This function returns a reference to member first
         * @return Reference to member first
         */
        eProsima_user_DllExport uint32_t &first();

        /*!
         * @brief This function sets a value in member second
         * @param _second New value for member second
         */
        eProsima_user_DllExport void second(int32_t _second);

        /*!
         * @brief This function returns the value of member second
         * @return Value of member second
         */
        eProsima_user_DllExport int32_t second() const;

        /*!
         * @brief This function returns a reference to member second
         * @return Reference to member second
         */
        eProsima_user_DllExport int32_t &second();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const PairInt &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_first;
        int32_t m_second;
    };

/*!
 * @brief This class represents the structure DotContext defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class DotContext {
    public:

        bool operator==(const DotContext &rhs) const {
            return m_cc == rhs.m_cc &&
                   m_dc == rhs.m_dc;
        }

        bool operator!=(const DotContext &rhs) const {
            return !(rhs == *this);
        }

        bool operator<(const DotContext &rhs) const {
            if (m_cc < rhs.m_cc)
                return true;
            if (rhs.m_cc < m_cc)
                return false;
            return m_dc < rhs.m_dc;
        }

        bool operator>(const DotContext &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const DotContext &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const DotContext &rhs) const {
            return !(*this < rhs);
        }
        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport DotContext();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~DotContext();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object DotContext that will be copied.
         */
        eProsima_user_DllExport DotContext(const DotContext &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object DotContext that will be copied.
         */
        eProsima_user_DllExport DotContext(DotContext &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object DotContext that will be copied.
         */
        eProsima_user_DllExport DotContext &operator=(const DotContext &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object DotContext that will be copied.
         */
        eProsima_user_DllExport DotContext &operator=(DotContext &&x);

        /*!
         * @brief This function copies the value in member cc
         * @param _cc New value to be copied in member cc
         */
        eProsima_user_DllExport void cc(const std::map<uint32_t, int32_t> &_cc);

        /*!
         * @brief This function moves the value in member cc
         * @param _cc New value to be moved in member cc
         */
        eProsima_user_DllExport void cc(std::map<uint32_t, int32_t> &&_cc);

        /*!
         * @brief This function returns a constant reference to member cc
         * @return Constant reference to member cc
         */
        eProsima_user_DllExport const std::map<uint32_t, int32_t> &cc() const;

        /*!
         * @brief This function returns a reference to member cc
         * @return Reference to member cc
         */
        eProsima_user_DllExport std::map<uint32_t, int32_t> &cc();
        /*!
         * @brief This function copies the value in member dc
         * @param _dc New value to be copied in member dc
         */
        eProsima_user_DllExport void dc(const std::vector<PairInt> &_dc);

        /*!
         * @brief This function moves the value in member dc
         * @param _dc New value to be moved in member dc
         */
        eProsima_user_DllExport void dc(std::vector<PairInt> &&_dc);

        /*!
         * @brief This function returns a constant reference to member dc
         * @return Constant reference to member dc
         */
        eProsima_user_DllExport const std::vector<PairInt> &dc() const;

        /*!
         * @brief This function returns a reference to member dc
         * @return Reference to member dc
         */
        eProsima_user_DllExport std::vector<PairInt> &dc();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t
        getCdrSerializedSize(const DotContext &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::map<uint32_t, int32_t> m_cc;
        std::vector<PairInt> m_dc;
    };

/*!
 * @brief This class represents the structure DotKernelAttr defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class DotKernelAttr {
    public:


        bool operator==(const DotKernelAttr &rhs) const {
            return m_ds == rhs.m_ds &&
                   m_cbase == rhs.m_cbase;
        }

        bool operator!=(const DotKernelAttr &rhs) const {
            return !(rhs == *this);
        }

        bool operator<(const DotKernelAttr &rhs) const {
            if (m_ds < rhs.m_ds)
                return true;
            if (rhs.m_ds < m_ds)
                return false;
            return m_cbase < rhs.m_cbase;
        }

        bool operator>(const DotKernelAttr &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const DotKernelAttr &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const DotKernelAttr &rhs) const {
            return !(*this < rhs);
        }

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport DotKernelAttr();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~DotKernelAttr();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object DotKernelAttr that will be copied.
         */
        eProsima_user_DllExport DotKernelAttr(const DotKernelAttr &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object DotKernelAttr that will be copied.
         */
        eProsima_user_DllExport DotKernelAttr(DotKernelAttr &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object DotKernelAttr that will be copied.
         */
        eProsima_user_DllExport DotKernelAttr &operator=(const DotKernelAttr &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object DotKernelAttr that will be copied.
         */
        eProsima_user_DllExport DotKernelAttr &operator=(DotKernelAttr &&x);

        /*!
         * @brief This function copies the value in member ds
         * @param _ds New value to be copied in member ds
         */
        eProsima_user_DllExport void ds(const std::map<PairInt, Attrib> &_ds);

        /*!
         * @brief This function moves the value in member ds
         * @param _ds New value to be moved in member ds
         */
        eProsima_user_DllExport void ds(std::map<PairInt, Attrib> &&_ds);

        /*!
         * @brief This function returns a constant reference to member ds
         * @return Constant reference to member ds
         */
        eProsima_user_DllExport const std::map<PairInt, Attrib> &ds() const;

        /*!
         * @brief This function returns a reference to member ds
         * @return Reference to member ds
         */
        eProsima_user_DllExport std::map<PairInt, Attrib> &ds();
        /*!
         * @brief This function copies the value in member cbase
         * @param _cbase New value to be copied in member cbase
         */
        eProsima_user_DllExport void cbase(const DotContext &_cbase);

        /*!
         * @brief This function moves the value in member cbase
         * @param _cbase New value to be moved in member cbase
         */
        eProsima_user_DllExport void cbase(DotContext &&_cbase);

        /*!
         * @brief This function returns a constant reference to member cbase
         * @return Constant reference to member cbase
         */
        eProsima_user_DllExport const DotContext &cbase() const;

        /*!
         * @brief This function returns a reference to member cbase
         * @return Reference to member cbase
         */
        eProsima_user_DllExport DotContext &cbase();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t
        getCdrSerializedSize(const DotKernelAttr &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::map<PairInt, Attrib> m_ds;
        DotContext m_cbase;
    };

/*!
 * @brief This class represents the structure MvregEdgeAttr defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class MvregEdgeAttr {
    public:

        bool operator==(const MvregEdgeAttr &rhs) const {
            return m_id == rhs.m_id &&
                   m_from == rhs.m_from &&
                   m_to == rhs.m_to &&
                   m_type == rhs.m_type &&
                   m_attr_name == rhs.m_attr_name &&
                   m_dk == rhs.m_dk;
        }

        bool operator!=(const MvregEdgeAttr &rhs) const {
            return !(rhs == *this);
        }

        bool operator<(const MvregEdgeAttr &rhs) const {
            if (m_id < rhs.m_id)
                return true;
            if (rhs.m_id < m_id)
                return false;
            if (m_from < rhs.m_from)
                return true;
            if (rhs.m_from < m_from)
                return false;
            if (m_to < rhs.m_to)
                return true;
            if (rhs.m_to < m_to)
                return false;
            if (m_type < rhs.m_type)
                return true;
            if (rhs.m_type < m_type)
                return false;
            if (m_attr_name < rhs.m_attr_name)
                return true;
            if (rhs.m_attr_name < m_attr_name)
                return false;
            return m_dk < rhs.m_dk;
        }

        bool operator>(const MvregEdgeAttr &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const MvregEdgeAttr &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const MvregEdgeAttr &rhs) const {
            return !(*this < rhs);
        }
        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport MvregEdgeAttr();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~MvregEdgeAttr();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object MvregEdgeAttr that will be copied.
         */
        eProsima_user_DllExport MvregEdgeAttr(const MvregEdgeAttr &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object MvregEdgeAttr that will be copied.
         */
        eProsima_user_DllExport MvregEdgeAttr(MvregEdgeAttr &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object MvregEdgeAttr that will be copied.
         */
        eProsima_user_DllExport MvregEdgeAttr &operator=(const MvregEdgeAttr &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object MvregEdgeAttr that will be copied.
         */
        eProsima_user_DllExport MvregEdgeAttr &operator=(MvregEdgeAttr &&x);

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(uint32_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint32_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint32_t &id();

        /*!
         * @brief This function sets a value in member from
         * @param _from New value for member from
         */
        eProsima_user_DllExport void from(uint32_t _from);

        /*!
         * @brief This function returns the value of member from
         * @return Value of member from
         */
        eProsima_user_DllExport uint32_t from() const;

        /*!
         * @brief This function returns a reference to member from
         * @return Reference to member from
         */
        eProsima_user_DllExport uint32_t &from();

        /*!
         * @brief This function sets a value in member to
         * @param _to New value for member to
         */
        eProsima_user_DllExport void to(uint32_t _to);

        /*!
         * @brief This function returns the value of member to
         * @return Value of member to
         */
        eProsima_user_DllExport uint32_t to() const;

        /*!
         * @brief This function returns a reference to member to
         * @return Reference to member to
         */
        eProsima_user_DllExport uint32_t &to();

        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(const std::string &_type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(std::string &&_type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string &type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string &type();
        /*!
         * @brief This function copies the value in member attr_name
         * @param _attr_name New value to be copied in member attr_name
         */
        eProsima_user_DllExport void attr_name(const std::string &_attr_name);

        /*!
         * @brief This function moves the value in member attr_name
         * @param _attr_name New value to be moved in member attr_name
         */
        eProsima_user_DllExport void attr_name(std::string &&_attr_name);

        /*!
         * @brief This function returns a constant reference to member attr_name
         * @return Constant reference to member attr_name
         */
        eProsima_user_DllExport const std::string &attr_name() const;

        /*!
         * @brief This function returns a reference to member attr_name
         * @return Reference to member attr_name
         */
        eProsima_user_DllExport std::string &attr_name();
        /*!
         * @brief This function copies the value in member dk
         * @param _dk New value to be copied in member dk
         */
        eProsima_user_DllExport void dk(const DotKernelAttr &_dk);

        /*!
         * @brief This function moves the value in member dk
         * @param _dk New value to be moved in member dk
         */
        eProsima_user_DllExport void dk(DotKernelAttr &&_dk);

        /*!
         * @brief This function returns a constant reference to member dk
         * @return Constant reference to member dk
         */
        eProsima_user_DllExport const DotKernelAttr &dk() const;

        /*!
         * @brief This function returns a reference to member dk
         * @return Reference to member dk
         */
        eProsima_user_DllExport DotKernelAttr &dk();
        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t
        getCdrSerializedSize(const MvregEdgeAttr &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_id;
        uint32_t m_from;
        uint32_t m_to;
        std::string m_type;
        std::string m_attr_name;
        DotKernelAttr m_dk;
        uint32_t m_agent_id;
    };

/*!
 * @brief This class represents the structure Edge defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class IDLEdge {
    public:

        bool operator==(const IDLEdge &rhs) const {
            return m_to == rhs.m_to &&
                   m_type == rhs.m_type &&
                   m_from == rhs.m_from &&
                   m_attrs == rhs.m_attrs;
        }

        bool operator!=(const IDLEdge &rhs) const {
            return !(rhs == *this);
        }

        bool operator<(const IDLEdge &rhs) const {
            if (m_to < rhs.m_to)
                return true;
            if (rhs.m_to < m_to)
                return false;
            if (m_type < rhs.m_type)
                return true;
            if (rhs.m_type < m_type)
                return false;
            if (m_from < rhs.m_from)
                return true;
            if (rhs.m_from < m_from)
                return false;
            return m_attrs < rhs.m_attrs;
        }

        bool operator>(const IDLEdge &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const IDLEdge &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const IDLEdge &rhs) const {
            return !(*this < rhs);
        }

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport IDLEdge();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~IDLEdge();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Edge that will be copied.
         */
        eProsima_user_DllExport IDLEdge(const IDLEdge &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Edge that will be copied.
         */
        eProsima_user_DllExport IDLEdge(IDLEdge &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Edge that will be copied.
         */
        eProsima_user_DllExport IDLEdge &operator=(const IDLEdge &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Edge that will be copied.
         */
        eProsima_user_DllExport IDLEdge &operator=(IDLEdge &&x);

        /*!
         * @brief This function sets a value in member to
         * @param _to New value for member to
         */
        eProsima_user_DllExport void to(uint32_t _to);

        /*!
         * @brief This function returns the value of member to
         * @return Value of member to
         */
        eProsima_user_DllExport uint32_t to() const;

        /*!
         * @brief This function returns a reference to member to
         * @return Reference to member to
         */
        eProsima_user_DllExport uint32_t &to();

        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(const std::string &_type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(std::string &&_type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string &type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string &type();
        /*!
         * @brief This function sets a value in member from
         * @param _from New value for member from
         */
        eProsima_user_DllExport void from(uint32_t _from);

        /*!
         * @brief This function returns the value of member from
         * @return Value of member from
         */
        eProsima_user_DllExport uint32_t from() const;

        /*!
         * @brief This function returns a reference to member from
         * @return Reference to member from
         */
        eProsima_user_DllExport uint32_t &from();

        /*!
         * @brief This function copies the value in member attrs
         * @param _attrs New value to be copied in member attrs
         */
        eProsima_user_DllExport void attrs(const std::map<std::string, MvregEdgeAttr> &_attrs);

        /*!
         * @brief This function moves the value in member attrs
         * @param _attrs New value to be moved in member attrs
         */
        eProsima_user_DllExport void attrs(std::map<std::string, MvregEdgeAttr> &&_attrs);

        /*!
         * @brief This function returns a constant reference to member attrs
         * @return Constant reference to member attrs
         */
        eProsima_user_DllExport const std::map<std::string, MvregEdgeAttr> &attrs() const;

        /*!
         * @brief This function returns a reference to member attrs
         * @return Reference to member attrs
         */
        eProsima_user_DllExport std::map<std::string, MvregEdgeAttr> &attrs();
        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const IDLEdge &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_to;
        std::string m_type;
        uint32_t m_from;
        std::map<std::string, MvregEdgeAttr> m_attrs;
        uint32_t m_agent_id;
    };

/*!
 * @brief This class represents the structure EdgeKey defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class EdgeKey {
    public:

        bool operator==(const EdgeKey &rhs) const {
            return m_to == rhs.m_to &&
                   m_type == rhs.m_type;
        }

        bool operator!=(const EdgeKey &rhs) const {
            return !(rhs == *this);
        }

        bool operator<(const EdgeKey &rhs) const {
            if (m_to < rhs.m_to)
                return true;
            if (rhs.m_to < m_to)
                return false;
            return m_type < rhs.m_type;
        }

        bool operator>(const EdgeKey &rhs) const {
            return rhs < *this;
        }

        bool operator<=(const EdgeKey &rhs) const {
            return !(rhs < *this);
        }

        bool operator>=(const EdgeKey &rhs) const {
            return !(*this < rhs);
        }

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport EdgeKey();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~EdgeKey();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object EdgeKey that will be copied.
         */
        eProsima_user_DllExport EdgeKey(const EdgeKey &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object EdgeKey that will be copied.
         */
        eProsima_user_DllExport EdgeKey(EdgeKey &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object EdgeKey that will be copied.
         */
        eProsima_user_DllExport EdgeKey &operator=(const EdgeKey &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object EdgeKey that will be copied.
         */
        eProsima_user_DllExport EdgeKey &operator=(EdgeKey &&x);

        /*!
         * @brief This function sets a value in member to
         * @param _to New value for member to
         */
        eProsima_user_DllExport void to(uint32_t _to);

        /*!
         * @brief This function returns the value of member to
         * @return Value of member to
         */
        eProsima_user_DllExport uint32_t to() const;

        /*!
         * @brief This function returns a reference to member to
         * @return Reference to member to
         */
        eProsima_user_DllExport uint32_t &to();

        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(const std::string &_type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(std::string &&_type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string &type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string &type();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const EdgeKey &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_to;
        std::string m_type;
    };

/*!
 * @brief This class represents the structure MvregNodeAttr defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class MvregNodeAttr {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport MvregNodeAttr();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~MvregNodeAttr();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object MvregNodeAttr that will be copied.
         */
        eProsima_user_DllExport MvregNodeAttr(const MvregNodeAttr &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object MvregNodeAttr that will be copied.
         */
        eProsima_user_DllExport MvregNodeAttr(MvregNodeAttr &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object MvregNodeAttr that will be copied.
         */
        eProsima_user_DllExport MvregNodeAttr &operator=(const MvregNodeAttr &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object MvregNodeAttr that will be copied.
         */
        eProsima_user_DllExport MvregNodeAttr &operator=(MvregNodeAttr &&x);

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(uint32_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint32_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint32_t &id();

        /*!
         * @brief This function sets a value in member node
         * @param _node New value for member node
         */
        eProsima_user_DllExport void node(uint32_t _node);

        /*!
         * @brief This function returns the value of member node
         * @return Value of member node
         */
        eProsima_user_DllExport uint32_t node() const;

        /*!
         * @brief This function returns a reference to member node
         * @return Reference to member node
         */
        eProsima_user_DllExport uint32_t &node();

        /*!
         * @brief This function copies the value in member attr_name
         * @param _attr_name New value to be copied in member attr_name
         */
        eProsima_user_DllExport void attr_name(const std::string &_attr_name);

        /*!
         * @brief This function moves the value in member attr_name
         * @param _attr_name New value to be moved in member attr_name
         */
        eProsima_user_DllExport void attr_name(std::string &&_attr_name);

        /*!
         * @brief This function returns a constant reference to member attr_name
         * @return Constant reference to member attr_name
         */
        eProsima_user_DllExport const std::string &attr_name() const;

        /*!
         * @brief This function returns a reference to member attr_name
         * @return Reference to member attr_name
         */
        eProsima_user_DllExport std::string &attr_name();
        /*!
         * @brief This function copies the value in member dk
         * @param _dk New value to be copied in member dk
         */
        eProsima_user_DllExport void dk(const DotKernelAttr &_dk);

        /*!
         * @brief This function moves the value in member dk
         * @param _dk New value to be moved in member dk
         */
        eProsima_user_DllExport void dk(DotKernelAttr &&_dk);

        /*!
         * @brief This function returns a constant reference to member dk
         * @return Constant reference to member dk
         */
        eProsima_user_DllExport const DotKernelAttr &dk() const;

        /*!
         * @brief This function returns a reference to member dk
         * @return Reference to member dk
         */
        eProsima_user_DllExport DotKernelAttr &dk();
        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t
        getCdrSerializedSize(const MvregNodeAttr &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_id;
        uint32_t m_node;
        std::string m_attr_name;
        DotKernelAttr m_dk;
        uint32_t m_agent_id;
    };

/*!
 * @brief This class represents the structure DotKernelEdge defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class DotKernelEdge {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport DotKernelEdge();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~DotKernelEdge();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object DotKernelEdge that will be copied.
         */
        eProsima_user_DllExport DotKernelEdge(const DotKernelEdge &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object DotKernelEdge that will be copied.
         */
        eProsima_user_DllExport DotKernelEdge(DotKernelEdge &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object DotKernelEdge that will be copied.
         */
        eProsima_user_DllExport DotKernelEdge &operator=(const DotKernelEdge &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object DotKernelEdge that will be copied.
         */
        eProsima_user_DllExport DotKernelEdge &operator=(DotKernelEdge &&x);

        /*!
         * @brief This function copies the value in member ds
         * @param _ds New value to be copied in member ds
         */
        eProsima_user_DllExport void ds(const std::map<PairInt, IDLEdge> &_ds);

        /*!
         * @brief This function moves the value in member ds
         * @param _ds New value to be moved in member ds
         */
        eProsima_user_DllExport void ds(std::map<PairInt, IDLEdge> &&_ds);

        /*!
         * @brief This function returns a constant reference to member ds
         * @return Constant reference to member ds
         */
        eProsima_user_DllExport const std::map<PairInt, IDLEdge> &ds() const;

        /*!
         * @brief This function returns a reference to member ds
         * @return Reference to member ds
         */
        eProsima_user_DllExport std::map<PairInt, IDLEdge> &ds();
        /*!
         * @brief This function copies the value in member cbase
         * @param _cbase New value to be copied in member cbase
         */
        eProsima_user_DllExport void cbase(const DotContext &_cbase);

        /*!
         * @brief This function moves the value in member cbase
         * @param _cbase New value to be moved in member cbase
         */
        eProsima_user_DllExport void cbase(DotContext &&_cbase);

        /*!
         * @brief This function returns a constant reference to member cbase
         * @return Constant reference to member cbase
         */
        eProsima_user_DllExport const DotContext &cbase() const;

        /*!
         * @brief This function returns a reference to member cbase
         * @return Reference to member cbase
         */
        eProsima_user_DllExport DotContext &cbase();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t
        getCdrSerializedSize(const DotKernelEdge &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::map<PairInt, IDLEdge> m_ds;
        DotContext m_cbase;
    };

/*!
 * @brief This class represents the structure MvregEdge defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class MvregEdge {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport MvregEdge();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~MvregEdge();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object MvregEdge that will be copied.
         */
        eProsima_user_DllExport MvregEdge(const MvregEdge &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object MvregEdge that will be copied.
         */
        eProsima_user_DllExport MvregEdge(MvregEdge &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object MvregEdge that will be copied.
         */
        eProsima_user_DllExport MvregEdge &operator=(const MvregEdge &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object MvregEdge that will be copied.
         */
        eProsima_user_DllExport MvregEdge &operator=(MvregEdge &&x);

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(uint32_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint32_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint32_t &id();

        /*!
         * @brief This function sets a value in member from
         * @param _from New value for member from
         */
        eProsima_user_DllExport void from(uint32_t _from);

        /*!
         * @brief This function returns the value of member from
         * @return Value of member from
         */
        eProsima_user_DllExport uint32_t from() const;

        /*!
         * @brief This function returns a reference to member from
         * @return Reference to member from
         */
        eProsima_user_DllExport uint32_t &from();

        /*!
         * @brief This function sets a value in member to
         * @param _to New value for member to
         */
        eProsima_user_DllExport void to(uint32_t _to);

        /*!
         * @brief This function returns the value of member to
         * @return Value of member to
         */
        eProsima_user_DllExport uint32_t to() const;

        /*!
         * @brief This function returns a reference to member to
         * @return Reference to member to
         */
        eProsima_user_DllExport uint32_t &to();

        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(const std::string &_type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(std::string &&_type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string &type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string &type();
        /*!
         * @brief This function copies the value in member dk
         * @param _dk New value to be copied in member dk
         */
        eProsima_user_DllExport void dk(const DotKernelEdge &_dk);

        /*!
         * @brief This function moves the value in member dk
         * @param _dk New value to be moved in member dk
         */
        eProsima_user_DllExport void dk(DotKernelEdge &&_dk);

        /*!
         * @brief This function returns a constant reference to member dk
         * @return Constant reference to member dk
         */
        eProsima_user_DllExport const DotKernelEdge &dk() const;

        /*!
         * @brief This function returns a reference to member dk
         * @return Reference to member dk
         */
        eProsima_user_DllExport DotKernelEdge &dk();
        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const MvregEdge &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_id;
        uint32_t m_from;
        uint32_t m_to;
        std::string m_type;
        DotKernelEdge m_dk;
        uint32_t m_agent_id;
    };

/*!
 * @brief This class represents the structure Node defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class IDLNode {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport IDLNode();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~IDLNode();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Node that will be copied.
         */
        eProsima_user_DllExport IDLNode(const IDLNode &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Node that will be copied.
         */
        eProsima_user_DllExport IDLNode(IDLNode &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Node that will be copied.
         */
        eProsima_user_DllExport IDLNode &operator=(const IDLNode &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Node that will be copied.
         */
        eProsima_user_DllExport IDLNode &operator=(IDLNode &&x);

        /*!
         * @brief This function copies the value in member type
         * @param _type New value to be copied in member type
         */
        eProsima_user_DllExport void type(const std::string &_type);

        /*!
         * @brief This function moves the value in member type
         * @param _type New value to be moved in member type
         */
        eProsima_user_DllExport void type(std::string &&_type);

        /*!
         * @brief This function returns a constant reference to member type
         * @return Constant reference to member type
         */
        eProsima_user_DllExport const std::string &type() const;

        /*!
         * @brief This function returns a reference to member type
         * @return Reference to member type
         */
        eProsima_user_DllExport std::string &type();
        /*!
         * @brief This function copies the value in member name
         * @param _name New value to be copied in member name
         */
        eProsima_user_DllExport void name(const std::string &_name);

        /*!
         * @brief This function moves the value in member name
         * @param _name New value to be moved in member name
         */
        eProsima_user_DllExport void name(std::string &&_name);

        /*!
         * @brief This function returns a constant reference to member name
         * @return Constant reference to member name
         */
        eProsima_user_DllExport const std::string &name() const;

        /*!
         * @brief This function returns a reference to member name
         * @return Reference to member name
         */
        eProsima_user_DllExport std::string &name();
        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(uint32_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint32_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint32_t &id();

        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();

        /*!
         * @brief This function copies the value in member attrs
         * @param _attrs New value to be copied in member attrs
         */
        eProsima_user_DllExport void attrs(const std::map<std::string, MvregNodeAttr> &_attrs);

        /*!
         * @brief This function moves the value in member attrs
         * @param _attrs New value to be moved in member attrs
         */
        eProsima_user_DllExport void attrs(std::map<std::string, MvregNodeAttr> &&_attrs);

        /*!
         * @brief This function returns a constant reference to member attrs
         * @return Constant reference to member attrs
         */
        eProsima_user_DllExport const std::map<std::string, MvregNodeAttr> &attrs() const;

        /*!
         * @brief This function returns a reference to member attrs
         * @return Reference to member attrs
         */
        eProsima_user_DllExport std::map<std::string, MvregNodeAttr> &attrs();
        /*!
         * @brief This function copies the value in member fano
         * @param _fano New value to be copied in member fano
         */
        eProsima_user_DllExport void fano(const std::map<EdgeKey, MvregEdge> &_fano);

        /*!
         * @brief This function moves the value in member fano
         * @param _fano New value to be moved in member fano
         */
        eProsima_user_DllExport void fano(std::map<EdgeKey, MvregEdge> &&_fano);

        /*!
         * @brief This function returns a constant reference to member fano
         * @return Constant reference to member fano
         */
        eProsima_user_DllExport const std::map<EdgeKey, MvregEdge> &fano() const;

        /*!
         * @brief This function returns a reference to member fano
         * @return Reference to member fano
         */
        eProsima_user_DllExport std::map<EdgeKey, MvregEdge> &fano();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const IDLNode &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_type;
        std::string m_name;
        uint32_t m_id;
        uint32_t m_agent_id;
        std::map<std::string, MvregNodeAttr> m_attrs;
        std::map<EdgeKey, MvregEdge> m_fano;
    };

/*!
 * @brief This class represents the structure GraphRequest defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class GraphRequest {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport GraphRequest();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~GraphRequest();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object GraphRequest that will be copied.
         */
        eProsima_user_DllExport GraphRequest(const GraphRequest &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object GraphRequest that will be copied.
         */
        eProsima_user_DllExport GraphRequest(GraphRequest &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object GraphRequest that will be copied.
         */
        eProsima_user_DllExport GraphRequest &operator=(const GraphRequest &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object GraphRequest that will be copied.
         */
        eProsima_user_DllExport GraphRequest &operator=(GraphRequest &&x);

        /*!
         * @brief This function copies the value in member from
         * @param _from New value to be copied in member from
         */
        eProsima_user_DllExport void from(const std::string &_from);

        /*!
         * @brief This function moves the value in member from
         * @param _from New value to be moved in member from
         */
        eProsima_user_DllExport void from(std::string &&_from);

        /*!
         * @brief This function returns a constant reference to member from
         * @return Constant reference to member from
         */
        eProsima_user_DllExport const std::string &from() const;

        /*!
         * @brief This function returns a reference to member from
         * @return Reference to member from
         */
        eProsima_user_DllExport std::string &from();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t
        getCdrSerializedSize(const GraphRequest &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::string m_from;
    };

/*!
 * @brief This class represents the structure DotKernel defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class DotKernel {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport DotKernel();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~DotKernel();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object DotKernel that will be copied.
         */
        eProsima_user_DllExport DotKernel(const DotKernel &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object DotKernel that will be copied.
         */
        eProsima_user_DllExport DotKernel(DotKernel &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object DotKernel that will be copied.
         */
        eProsima_user_DllExport DotKernel &operator=(const DotKernel &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object DotKernel that will be copied.
         */
        eProsima_user_DllExport DotKernel &operator=(DotKernel &&x);

        /*!
         * @brief This function copies the value in member ds
         * @param _ds New value to be copied in member ds
         */
        eProsima_user_DllExport void ds(const std::map<PairInt, IDLNode> &_ds);

        /*!
         * @brief This function moves the value in member ds
         * @param _ds New value to be moved in member ds
         */
        eProsima_user_DllExport void ds(std::map<PairInt, IDLNode> &&_ds);

        /*!
         * @brief This function returns a constant reference to member ds
         * @return Constant reference to member ds
         */
        eProsima_user_DllExport const std::map<PairInt, IDLNode> &ds() const;

        /*!
         * @brief This function returns a reference to member ds
         * @return Reference to member ds
         */
        eProsima_user_DllExport std::map<PairInt, IDLNode> &ds();
        /*!
         * @brief This function copies the value in member cbase
         * @param _cbase New value to be copied in member cbase
         */
        eProsima_user_DllExport void cbase(const DotContext &_cbase);

        /*!
         * @brief This function moves the value in member cbase
         * @param _cbase New value to be moved in member cbase
         */
        eProsima_user_DllExport void cbase(DotContext &&_cbase);

        /*!
         * @brief This function returns a constant reference to member cbase
         * @return Constant reference to member cbase
         */
        eProsima_user_DllExport const DotContext &cbase() const;

        /*!
         * @brief This function returns a reference to member cbase
         * @return Reference to member cbase
         */
        eProsima_user_DllExport DotContext &cbase();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const DotKernel &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        std::map<PairInt, IDLNode> m_ds;
        DotContext m_cbase;
    };

/*!
 * @brief This class represents the structure Mvreg defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class Mvreg {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Mvreg();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Mvreg();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object Mvreg that will be copied.
         */
        eProsima_user_DllExport Mvreg(const Mvreg &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object Mvreg that will be copied.
         */
        eProsima_user_DllExport Mvreg(Mvreg &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object Mvreg that will be copied.
         */
        eProsima_user_DllExport Mvreg &operator=(const Mvreg &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object Mvreg that will be copied.
         */
        eProsima_user_DllExport Mvreg &operator=(Mvreg &&x);

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(uint32_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint32_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint32_t &id();

        /*!
         * @brief This function copies the value in member dk
         * @param _dk New value to be copied in member dk
         */
        eProsima_user_DllExport void dk(const DotKernel &_dk);

        /*!
         * @brief This function moves the value in member dk
         * @param _dk New value to be moved in member dk
         */
        eProsima_user_DllExport void dk(DotKernel &&_dk);

        /*!
         * @brief This function returns a constant reference to member dk
         * @return Constant reference to member dk
         */
        eProsima_user_DllExport const DotKernel &dk() const;

        /*!
         * @brief This function returns a reference to member dk
         * @return Reference to member dk
         */
        eProsima_user_DllExport DotKernel &dk();
        /*!
         * @brief This function sets a value in member agent_id
         * @param _agent_id New value for member agent_id
         */
        eProsima_user_DllExport void agent_id(uint32_t _agent_id);

        /*!
         * @brief This function returns the value of member agent_id
         * @return Value of member agent_id
         */
        eProsima_user_DllExport uint32_t agent_id() const;

        /*!
         * @brief This function returns a reference to member agent_id
         * @return Reference to member agent_id
         */
        eProsima_user_DllExport uint32_t &agent_id();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const Mvreg &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_id;
        DotKernel m_dk;
        uint32_t m_agent_id;
    };

/*!
 * @brief This class represents the structure OrMap defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
    class OrMap {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport OrMap();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~OrMap();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object OrMap that will be copied.
         */
        eProsima_user_DllExport OrMap(const OrMap &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object OrMap that will be copied.
         */
        eProsima_user_DllExport OrMap(OrMap &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object OrMap that will be copied.
         */
        eProsima_user_DllExport OrMap &operator=(const OrMap &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object OrMap that will be copied.
         */
        eProsima_user_DllExport OrMap &operator=(OrMap &&x);

        /*!
         * @brief This function sets a value in member id
         * @param _id New value for member id
         */
        eProsima_user_DllExport void id(uint32_t _id);

        /*!
         * @brief This function returns the value of member id
         * @return Value of member id
         */
        eProsima_user_DllExport uint32_t id() const;

        /*!
         * @brief This function returns a reference to member id
         * @return Reference to member id
         */
        eProsima_user_DllExport uint32_t &id();

        /*!
         * @brief This function copies the value in member m
         * @param _m New value to be copied in member m
         */
        eProsima_user_DllExport void m(const std::map<uint32_t, Mvreg> &_m);

        /*!
         * @brief This function moves the value in member m
         * @param _m New value to be moved in member m
         */
        eProsima_user_DllExport void m(std::map<uint32_t, Mvreg> &&_m);

        /*!
         * @brief This function returns a constant reference to member m
         * @return Constant reference to member m
         */
        eProsima_user_DllExport const std::map<uint32_t, Mvreg> &m() const;

        /*!
         * @brief This function returns a reference to member m
         * @return Reference to member m
         */
        eProsima_user_DllExport std::map<uint32_t, Mvreg> &m();
        /*!
         * @brief This function copies the value in member cbase
         * @param _cbase New value to be copied in member cbase
         */
        eProsima_user_DllExport void cbase(const DotContext &_cbase);

        /*!
         * @brief This function moves the value in member cbase
         * @param _cbase New value to be moved in member cbase
         */
        eProsima_user_DllExport void cbase(DotContext &&_cbase);

        /*!
         * @brief This function returns a constant reference to member cbase
         * @return Constant reference to member cbase
         */
        eProsima_user_DllExport const DotContext &cbase() const;

        /*!
         * @brief This function returns a reference to member cbase
         * @return Reference to member cbase
         */
        eProsima_user_DllExport DotContext &cbase();

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const OrMap &data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        uint32_t m_id;
        std::map<uint32_t, Mvreg> m_m;
        DotContext m_cbase;
    };

}
#endif // _DSRGRAPH_H_