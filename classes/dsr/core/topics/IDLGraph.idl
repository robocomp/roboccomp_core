
    union Val switch(long) {
      case 0:
        string str;
      case 1:
        long dec;
      case 2:
        float fl;
      case 3:
        sequence<float>  float_vec;
      case 4:
        boolean bl;
      case 5:
        sequence<octet> byte_vec;
      case 1:
        unsigned long uint;
    };

    enum Types
    {
        _STRING,
        _INT,
        _FLOAT,
        _FLOAT_VEC,
        _BOOL,
        _BYTE_VEC
    };

    struct Uuid {
        unsigned long long first;
        unsigned long long second;
    };

    struct _Attrib
    {
        unsigned long type;
        Val value;
        unsigned long long timestamp;
        unsigned long agent_id;
    };

    struct PairInt {
        Uuid first;
        long second;
    };

    struct DotContext {
        map<Uuid, long> cc;
        sequence<PairInt> dc;
    };

    struct DotKernelAttr {
        map<PairInt, Attrib> ds;
        DotContext cbase;
    };

    struct MvregEdgeAttr {
        Uuid id;
        Uuid from;
        Uuid to;
        string type;
        string attr_name; // We need it for remove deltas.
        DotKernelAttr dk;
        unsigned long agent_id; // to skip messages from the same agent in multithread.
    };

    struct IDLEdge {
        Uuid to; //key1
		string type; //key2
		Uuid from; // Se mantiene para trabajar más fácilmente con los Edges.
		map<string, MvregEdgeAttr>    attrs;
		unsigned long agent_id;

	};

    struct EdgeKey {
        unsigned long to;
        string type;
    };

    struct MvregNodeAttr {
        Uuid id;
        Uuid node;
        string attr_name; // We need it for remove deltas.
        DotKernelAttr dk;
        unsigned long agent_id; // to skip messages from the same agent in multithread.
    };


    struct DotKernelEdge {
        map<PairInt, IDLEdge> ds;
        DotContext cbase;
    };

    struct MvregEdge {
        Uuid id;
        Uuid from;
        Uuid to;
        string type;
        DotKernelEdge dk;
        unsigned long agent_id; // to skip messages from the same agent in multithread.
    };


    struct IDLNode {
        string type;
        string name;
        Uuid id;
        unsigned long agent_id;
		map<string, MvregNodeAttr>   attrs;
		map<EdgeKey, MvregEdge> fano;
    };

    struct GraphRequest
    {
        string from;
    };

    struct DotKernel {
        map<PairInt, IDLNode> ds;
        DotContext cbase;
    };

    struct MvregNode {
        Uuid id;
        DotKernel dk;
        unsigned long agent_id; // to skip messages from the same agent in multithread.
    };

    struct OrMap {
        unsigned long id;
        map<Uuid, Mvreg> m;
        DotContext cbase;
    };


    struct MvregEdgeAttrVec {
    	sequence<MvregEdgeAttr> vec;
    };
    
    struct MvregNodeAttrVec {
    	sequence<MvregNodeAttr> vec;
    };



