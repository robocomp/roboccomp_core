// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DSRGraph.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DSRGRAPH_H_
#define _DSRGRAPH_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>
#include <iostream>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DSRGraph_SOURCE)
#define DSRGraph_DllAPI __declspec( dllexport )
#else
#define DSRGraph_DllAPI __declspec( dllimport )
#endif // DSRGraph_SOURCE
#else
#define DSRGraph_DllAPI
#endif
#else
#define DSRGraph_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the union Val defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class Val
{
public:



    bool operator<(const Val &rhs) const {

        if (m__d != rhs.m__d) return false;

        switch(m__d) {
            case 0:
                return m_str < rhs.m_str;
            case 1:
                return m_dec < rhs.m_dec;
            case 2:
                return m_fl < rhs.m_fl;
            case 3:
                return m_float_vec < rhs.m_float_vec;
            case 4:
                return m_bl < rhs.m_bl;
            default:
                return false;
        }
    }

    bool operator>(const Val &rhs) const {
        return rhs < *this;
    }

    bool operator<=(const Val &rhs) const {
        return !(rhs < *this);
    }

    bool operator>=(const Val &rhs) const {
        return !(*this < rhs);
    }

    bool operator==(const Val &rhs) const {

        if (m__d != rhs.m__d) return false;

        switch(m__d) {
            case 0:
                return m_str == rhs.m_str;
            case 1:
                return m_dec == rhs.m_dec;
            case 2:
                return m_fl == rhs.m_fl;
            case 3:
                return m_float_vec == rhs.m_float_vec;
            case 4:
                return m_bl == rhs.m_bl;
            default:
                return false;
        }
    }

    bool operator!=(const Val &rhs) const {
        return !(rhs == *this);
    }

    friend std::ostream &operator<<(std::ostream &os, const Val &type) {

        int d = type._d();
        switch (d) {
            case 0:
                os << " str: " << type.m_str;
                break;
            case 1:
                os << " dec: " << type.m_dec;
                break;
            case 2:
                os << " float: " << type.m_fl;
                break;
            case 3:
                os << " float_vec: [ ";
                for (auto &k: type.m_float_vec)
                    os << k << ", ";
                os << "] ";
                break;
            case 4:
                os << "bool: " << (type.m_bl ? " TRUE" : " FALSE");
                break;
            default:
                os << "OTRO TIPO";
                break;
        }
        return os;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Val();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Val();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val(const Val &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val(Val &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val& operator=(const Val &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Val that will be copied.
     */
    eProsima_user_DllExport Val& operator=(Val &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function copies the value in member str
     * @param _str New value to be copied in member str
     */
    eProsima_user_DllExport void str(const std::string &_str);

    /*!
     * @brief This function moves the value in member str
     * @param _str New value to be moved in member str
     */
    eProsima_user_DllExport void str(std::string &&_str);

    /*!
     * @brief This function returns a constant reference to member str
     * @return Constant reference to member str
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::string& str() const;

    /*!
     * @brief This function returns a reference to member str
     * @return Reference to member str
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::string& str();
    /*!
     * @brief This function sets a value in member dec
     * @param _dec New value for member dec
     */
    eProsima_user_DllExport void dec(int32_t _dec);

    /*!
     * @brief This function returns the value of member dec
     * @return Value of member dec
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t dec() const;

    /*!
     * @brief This function returns a reference to member dec
     * @return Reference to member dec
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& dec();

    /*!
     * @brief This function sets a value in member fl
     * @param _fl New value for member fl
     */
    eProsima_user_DllExport void fl(float _fl);

    /*!
     * @brief This function returns the value of member fl
     * @return Value of member fl
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float fl() const;

    /*!
     * @brief This function returns a reference to member fl
     * @return Reference to member fl
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& fl();

    /*!
     * @brief This function copies the value in member float_vec
     * @param _float_vec New value to be copied in member float_vec
     */
    eProsima_user_DllExport void float_vec(const std::vector<float> &_float_vec);

    /*!
     * @brief This function moves the value in member float_vec
     * @param _float_vec New value to be moved in member float_vec
     */
    eProsima_user_DllExport void float_vec(std::vector<float> &&_float_vec);

    /*!
     * @brief This function returns a constant reference to member float_vec
     * @return Constant reference to member float_vec
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const std::vector<float>& float_vec() const;

    /*!
     * @brief This function returns a reference to member float_vec
     * @return Reference to member float_vec
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport std::vector<float>& float_vec();
    /*!
     * @brief This function sets a value in member bl
     * @param _bl New value for member bl
     */
    eProsima_user_DllExport void bl(bool _bl);

    /*!
     * @brief This function returns the value of member bl
     * @return Value of member bl
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport bool bl() const;

    /*!
     * @brief This function returns a reference to member bl
     * @return Reference to member bl
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport bool& bl();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Val& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);




private:
    int32_t m__d;

    std::string m_str;
    int32_t m_dec;
    float m_fl;
    std::vector<float> m_float_vec;
    bool m_bl;
};
/*!
 * @brief This class represents the enumeration Types defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
enum Types : uint32_t
{
    STRING,
    INT,
    FLOAT,
    FLOAT_VEC,
    BOOL
};
/*!
 * @brief This class represents the structure Attrib defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class Attrib
{
public:


    bool operator==(const Attrib &av_) const {
        if (this == &av_) {
            return true;
        }
        if (type() != av_.type() || value() != av_.value() ) {
            return false;
        }
        return true;
    }
    bool operator<(const Attrib &av_) const {
        if (this == &av_) {
            return false;
        }
        if (value() < av_.value()) {
            return true;
        } else if (av_.value() < value()) {
            return false;
        }
        return false;
    }

    bool operator!=(const Attrib &av_) const {
        return !operator==(av_);
    }

    bool operator<=(const Attrib &av_) const {
        return operator<(av_) || operator==(av_);
    }

    bool operator>(const Attrib &av_) const {
        return !operator<(av_) && !operator==(av_);
    }

    bool operator>=(const Attrib &av_) const {
        return !operator<(av_);
    }

    friend std::ostream &operator<<(std::ostream &output, const Attrib &av_) {
        output << "Type: "<<av_.type()<<", Value["<<av_.value()<<"]: "<<av_.value()<<", ";
        return output;
    };

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Attrib();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Attrib();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib(const Attrib &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib(Attrib &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib& operator=(const Attrib &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Attrib that will be copied.
     */
    eProsima_user_DllExport Attrib& operator=(Attrib &&x);

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(int32_t _type);

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport int32_t type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport int32_t& type();

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(const Val &_value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(Val &&_value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const Val& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport Val& value();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Attrib& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_type;
    Val m_value;
};
/*!
 * @brief This class represents the structure Edge defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class Edge
{
public:


    bool operator==(const Edge &eA_) const {
        if (this == &eA_) {
            return true;
        }
        if (m_type != eA_.m_type || from() != eA_.from() || to() != eA_.to() || attrs() != eA_.attrs()) {
            return false;
        }
        return true;
    }

    bool operator<(const Edge &eA_) const {
        if (this == &eA_) {
            return false;
        }
        if (m_type < eA_.m_type) {
            return true;
        } else if (eA_.m_type < m_type) {
            return false;
        }
        return false;
    }

    bool operator!=(const Edge &eA_) const {
        return !operator==(eA_);
    }

    bool operator<=(const Edge &eA_) const {
        return operator<(eA_) || operator==(eA_);
    }

    bool operator>(const Edge &eA_) const {
        return !operator<(eA_) && !operator==(eA_);
    }

    bool operator>=(const Edge &eA_) const {
        return !operator<(eA_);
    }

    friend std::ostream &operator<<(std::ostream &output, const Edge &ea_) {
        output << "EdgeAttribs["<<ea_.m_type<<", from:" << ea_.from() << "-> to:"<<ea_.to()<<" Attribs:[";
        for (auto v : ea_.attrs())
            output << v.first <<":"<< v.second <<" - ";
        output<<"]]";
        return output;
    };

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Edge();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Edge();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Edge that will be copied.
     */
    eProsima_user_DllExport Edge(const Edge &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Edge that will be copied.
     */
    eProsima_user_DllExport Edge(Edge &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Edge that will be copied.
     */
    eProsima_user_DllExport Edge& operator=(const Edge &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Edge that will be copied.
     */
    eProsima_user_DllExport Edge& operator=(Edge &&x);

    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(int32_t _to);

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport int32_t to() const;

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport int32_t& to();

    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(const std::string &_type);

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(std::string &&_type);

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type();
    /*!
     * @brief This function sets a value in member from
     * @param _from New value for member from
     */
    eProsima_user_DllExport void from(int32_t _from);

    /*!
     * @brief This function returns the value of member from
     * @return Value of member from
     */
    eProsima_user_DllExport int32_t from() const;

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport int32_t& from();

    /*!
     * @brief This function copies the value in member attrs
     * @param _attrs New value to be copied in member attrs
     */
    eProsima_user_DllExport void attrs(const std::map<std::string, Attrib> &_attrs);

    /*!
     * @brief This function moves the value in member attrs
     * @param _attrs New value to be moved in member attrs
     */
    eProsima_user_DllExport void attrs(std::map<std::string, Attrib> &&_attrs);

    /*!
     * @brief This function returns a constant reference to member attrs
     * @return Constant reference to member attrs
     */
    eProsima_user_DllExport const std::map<std::string, Attrib>& attrs() const;

    /*!
     * @brief This function returns a reference to member attrs
     * @return Reference to member attrs
     */
    eProsima_user_DllExport std::map<std::string, Attrib>& attrs();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Edge& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_to;
    std::string m_type;
    int32_t m_from;
    std::map<std::string, Attrib> m_attrs;
};
/*!
 * @brief This class represents the structure EdgeKey defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class EdgeKey
{
public:

    friend std::ostream &operator<<(std::ostream &os, const EdgeKey &key) {
        os << "[ to: " << key.m_to << "- type: " << key.m_type <<" ]";
        return os;
    }

    bool operator==(const EdgeKey &rhs) const {
        return m_to == rhs.m_to &&
               m_type == rhs.m_type;
    }

    bool operator!=(const EdgeKey &rhs) const {
        return !(rhs == *this);
    }

    bool operator<(const EdgeKey &rhs) const {
        if (m_to < rhs.m_to)
            return true;
        if (rhs.m_to < m_to)
            return false;
        return m_type < rhs.m_type;
    }

    bool operator>(const EdgeKey &rhs) const {
        return rhs < *this;
    }

    bool operator<=(const EdgeKey &rhs) const {
        return !(rhs < *this);
    }

    bool operator>=(const EdgeKey &rhs) const {
        return !(*this < rhs);
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EdgeKey();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EdgeKey();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey(const EdgeKey &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey(EdgeKey &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey& operator=(const EdgeKey &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EdgeKey that will be copied.
     */
    eProsima_user_DllExport EdgeKey& operator=(EdgeKey &&x);

    /*!
     * @brief This function sets a value in member to
     * @param _to New value for member to
     */
    eProsima_user_DllExport void to(int32_t _to);

    /*!
     * @brief This function returns the value of member to
     * @return Value of member to
     */
    eProsima_user_DllExport int32_t to() const;

    /*!
     * @brief This function returns a reference to member to
     * @return Reference to member to
     */
    eProsima_user_DllExport int32_t& to();

    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(const std::string &_type);

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(std::string &&_type);

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const EdgeKey& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_to;
    std::string m_type;
};
/*!
 * @brief This class represents the structure Node defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class Node
{
public:


    bool operator==(const Node &n_) const {
        if (this == &n_) {
            return true;
        }
        if (id() != n_.id() || type() != n_.type() || attrs() != n_.attrs() || fano() != n_.fano()) {
            return false;
        }
        return true;
    }


    bool operator<(const Node &n_) const {
        if (this == &n_) {
            return false;
        }
        if (id() < n_.id()) {
            return true;
        } else if (n_.id() < id()) {
            return false;
        }
        return false;
    }

    bool operator!=(const Node &n_) const {
        return !operator==(n_);
    }

    bool operator<=(const Node &n_) const {
        return operator<(n_) || operator==(n_);
    }

    bool operator>(const Node &n_) const {
        return !operator<(n_) && !operator==(n_);
    }

    bool operator>=(const Node &n_) const {
        return !operator<(n_);
    }

    friend std::ostream &operator<<(std::ostream &output, const Node &n_) {
        output <<"Node:["<<n_.id()<<"," << n_.name() <<"," << n_.type() <<"], Attribs:[";
        for (auto v : n_.attrs())
            output << v.first <<":("<< v.second <<");";
        output<<"], FanOut:[";
        for (auto v : n_.fano())
            output << "[ "<< v.first.to() << " "<< v.first.type() << "] " <<":("<< v.second <<");";
        output << "]";
        return output;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Node();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Node();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Node that will be copied.
     */
    eProsima_user_DllExport Node(const Node &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Node that will be copied.
     */
    eProsima_user_DllExport Node(Node &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Node that will be copied.
     */
    eProsima_user_DllExport Node& operator=(const Node &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Node that will be copied.
     */
    eProsima_user_DllExport Node& operator=(Node &&x);

    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(const std::string &_type);

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(std::string &&_type);

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type();
    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(const std::string &_name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(std::string &&_name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();
    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(int32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id();

    /*!
     * @brief This function sets a value in member agent_id
     * @param _agent_id New value for member agent_id
     */
    eProsima_user_DllExport void agent_id(int32_t _agent_id);

    /*!
     * @brief This function returns the value of member agent_id
     * @return Value of member agent_id
     */
    eProsima_user_DllExport int32_t agent_id() const;

    /*!
     * @brief This function returns a reference to member agent_id
     * @return Reference to member agent_id
     */
    eProsima_user_DllExport int32_t& agent_id();

    /*!
     * @brief This function copies the value in member attrs
     * @param _attrs New value to be copied in member attrs
     */
    eProsima_user_DllExport void attrs(const std::map<std::string, Attrib> &_attrs);

    /*!
     * @brief This function moves the value in member attrs
     * @param _attrs New value to be moved in member attrs
     */
    eProsima_user_DllExport void attrs(std::map<std::string, Attrib> &&_attrs);

    /*!
     * @brief This function returns a constant reference to member attrs
     * @return Constant reference to member attrs
     */
    eProsima_user_DllExport const std::map<std::string, Attrib>& attrs() const;

    /*!
     * @brief This function returns a reference to member attrs
     * @return Reference to member attrs
     */
    eProsima_user_DllExport std::map<std::string, Attrib>& attrs();
    /*!
     * @brief This function copies the value in member fano
     * @param _fano New value to be copied in member fano
     */
    eProsima_user_DllExport void fano(const std::map<EdgeKey, Edge> &_fano);

    /*!
     * @brief This function moves the value in member fano
     * @param _fano New value to be moved in member fano
     */
    eProsima_user_DllExport void fano(std::map<EdgeKey, Edge> &&_fano);

    /*!
     * @brief This function returns a constant reference to member fano
     * @return Constant reference to member fano
     */
    eProsima_user_DllExport const std::map<EdgeKey, Edge>& fano() const;

    /*!
     * @brief This function returns a reference to member fano
     * @return Reference to member fano
     */
    eProsima_user_DllExport std::map<EdgeKey, Edge>& fano();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const Node& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::string m_type;
    std::string m_name;
    int32_t m_id;
    int32_t m_agent_id;
    std::map<std::string, Attrib> m_attrs;
    std::map<EdgeKey, Edge> m_fano;
};
/*!
 * @brief This class represents the structure GraphRequest defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class GraphRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GraphRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GraphRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest(const GraphRequest &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest(GraphRequest &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest& operator=(const GraphRequest &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GraphRequest that will be copied.
     */
    eProsima_user_DllExport GraphRequest& operator=(GraphRequest &&x);

    /*!
     * @brief This function copies the value in member from
     * @param _from New value to be copied in member from
     */
    eProsima_user_DllExport void from(const std::string &_from);

    /*!
     * @brief This function moves the value in member from
     * @param _from New value to be moved in member from
     */
    eProsima_user_DllExport void from(std::string &&_from);

    /*!
     * @brief This function returns a constant reference to member from
     * @return Constant reference to member from
     */
    eProsima_user_DllExport const std::string& from() const;

    /*!
     * @brief This function returns a reference to member from
     * @return Reference to member from
     */
    eProsima_user_DllExport std::string& from();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const GraphRequest& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::string m_from;
};
/*!
 * @brief This class represents the structure PairInt defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class PairInt
{
public:

    bool operator==(const PairInt &pi_) const {
        if (this == &pi_) {
            return true;
        }
        if (first() != pi_.first() || second() != pi_.second()) {
            return false;
        }
        return true;
    }

    bool operator<(const PairInt &pi_) const {
        if (this == &pi_) {
            return false;
        }
        if ( (first()+second()) < (pi_.first()+pi_.second())) {
            return true;
        } else if ((first()+second()) > (pi_.first()+pi_.second())) {
            return false;
        }
        return false;
    }

    bool operator!=(const PairInt &pi_) const {
        return !operator==(pi_);
    }

    bool operator<=(const PairInt &pi_) const {
        return operator<(pi_) || operator==(pi_);
    }

    bool operator>(const PairInt &pi_) const {
        return !operator<(pi_) && !operator==(pi_);
    }

    bool operator>=(const PairInt &pi_) const {
        return !operator<(pi_);
    }
    friend std::ostream &operator<<(std::ostream &output, const PairInt &pi_) {
        output <<"("<<pi_.first()<<","<<pi_.second()<<")";
        return output;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PairInt();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PairInt();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt(const PairInt &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt(PairInt &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt& operator=(const PairInt &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PairInt that will be copied.
     */
    eProsima_user_DllExport PairInt& operator=(PairInt &&x);

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(int32_t _first);

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     */
    eProsima_user_DllExport int32_t first() const;

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     */
    eProsima_user_DllExport int32_t& first();

    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(int32_t _second);

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     */
    eProsima_user_DllExport int32_t second() const;

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     */
    eProsima_user_DllExport int32_t& second();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const PairInt& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_first;
    int32_t m_second;
};
/*!
 * @brief This class represents the structure DotContext defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class DotContext
{
public:

    friend std::ostream &operator<<(std::ostream &output, const DotContext &dc_) {
        output << ", CC: [";
        for (const auto & kv : dc_.cc())
            output <<" "<< kv.first << ":" << kv.second;
        output << "] , DC: [";
        for (const auto & kv : dc_.dc())
            output <<" "<< kv.first() << ":" << kv.second();
        output << "] ";
        return output;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DotContext();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DotContext();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext(const DotContext &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext(DotContext &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext& operator=(const DotContext &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DotContext that will be copied.
     */
    eProsima_user_DllExport DotContext& operator=(DotContext &&x);

    /*!
     * @brief This function copies the value in member cc
     * @param _cc New value to be copied in member cc
     */
    eProsima_user_DllExport void cc(const std::map<int32_t, int32_t> &_cc);

    /*!
     * @brief This function moves the value in member cc
     * @param _cc New value to be moved in member cc
     */
    eProsima_user_DllExport void cc(std::map<int32_t, int32_t> &&_cc);

    /*!
     * @brief This function returns a constant reference to member cc
     * @return Constant reference to member cc
     */
    eProsima_user_DllExport const std::map<int32_t, int32_t>& cc() const;

    /*!
     * @brief This function returns a reference to member cc
     * @return Reference to member cc
     */
    eProsima_user_DllExport std::map<int32_t, int32_t>& cc();
    /*!
     * @brief This function copies the value in member dc
     * @param _dc New value to be copied in member dc
     */
    eProsima_user_DllExport void dc(const std::vector<PairInt> &_dc);

    /*!
     * @brief This function moves the value in member dc
     * @param _dc New value to be moved in member dc
     */
    eProsima_user_DllExport void dc(std::vector<PairInt> &&_dc);

    /*!
     * @brief This function returns a constant reference to member dc
     * @return Constant reference to member dc
     */
    eProsima_user_DllExport const std::vector<PairInt>& dc() const;

    /*!
     * @brief This function returns a reference to member dc
     * @return Reference to member dc
     */
    eProsima_user_DllExport std::vector<PairInt>& dc();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const DotContext& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::map<int32_t, int32_t> m_cc;
    std::vector<PairInt> m_dc;
};
/*!
 * @brief This class represents the structure DotKernel defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class DotKernel
{
public:

    friend std::ostream &operator<<(std::ostream &output, const DotKernel &dk_) {
        for (const auto & kv : dk_.ds())
            output << kv.first << "-->" << kv.second<< ", ";
        output <<dk_.cbase();
        return output;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DotKernel();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DotKernel();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel(const DotKernel &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel(DotKernel &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel& operator=(const DotKernel &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DotKernel that will be copied.
     */
    eProsima_user_DllExport DotKernel& operator=(DotKernel &&x);

    /*!
     * @brief This function copies the value in member ds
     * @param _ds New value to be copied in member ds
     */
    eProsima_user_DllExport void ds(const std::map<PairInt, Node> &_ds);

    /*!
     * @brief This function moves the value in member ds
     * @param _ds New value to be moved in member ds
     */
    eProsima_user_DllExport void ds(std::map<PairInt, Node> &&_ds);

    /*!
     * @brief This function returns a constant reference to member ds
     * @return Constant reference to member ds
     */
    eProsima_user_DllExport const std::map<PairInt, Node>& ds() const;

    /*!
     * @brief This function returns a reference to member ds
     * @return Reference to member ds
     */
    eProsima_user_DllExport std::map<PairInt, Node>& ds();
    /*!
     * @brief This function copies the value in member cbase
     * @param _cbase New value to be copied in member cbase
     */
    eProsima_user_DllExport void cbase(const DotContext &_cbase);

    /*!
     * @brief This function moves the value in member cbase
     * @param _cbase New value to be moved in member cbase
     */
    eProsima_user_DllExport void cbase(DotContext &&_cbase);

    /*!
     * @brief This function returns a constant reference to member cbase
     * @return Constant reference to member cbase
     */
    eProsima_user_DllExport const DotContext& cbase() const;

    /*!
     * @brief This function returns a reference to member cbase
     * @return Reference to member cbase
     */
    eProsima_user_DllExport DotContext& cbase();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const DotKernel& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    std::map<PairInt, Node> m_ds;
    DotContext m_cbase;
};
/*!
 * @brief This class represents the structure AworSet defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class AworSet
{
public:

    friend std::ostream &operator<<(std::ostream &output, const AworSet &as_) {
        output <<"RoboCompDSR::AworSet: ID:["<<as_.id()<<"], Data: ["<<as_.dk()<<"] ";
        return output;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AworSet();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AworSet();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AworSet that will be copied.
     */
    eProsima_user_DllExport AworSet(const AworSet &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AworSet that will be copied.
     */
    eProsima_user_DllExport AworSet(AworSet &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AworSet that will be copied.
     */
    eProsima_user_DllExport AworSet& operator=(const AworSet &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AworSet that will be copied.
     */
    eProsima_user_DllExport AworSet& operator=(AworSet &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(int32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id();

    /*!
     * @brief This function copies the value in member dk
     * @param _dk New value to be copied in member dk
     */
    eProsima_user_DllExport void dk(const DotKernel &_dk);

    /*!
     * @brief This function moves the value in member dk
     * @param _dk New value to be moved in member dk
     */
    eProsima_user_DllExport void dk(DotKernel &&_dk);

    /*!
     * @brief This function returns a constant reference to member dk
     * @return Constant reference to member dk
     */
    eProsima_user_DllExport const DotKernel& dk() const;

    /*!
     * @brief This function returns a reference to member dk
     * @return Reference to member dk
     */
    eProsima_user_DllExport DotKernel& dk();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const AworSet& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_id;
    DotKernel m_dk;
};
/*!
 * @brief This class represents the structure OrMap defined by the user in the IDL file.
 * @ingroup DSRGRAPH
 */
class OrMap
{
public:

    friend std::ostream &operator<<(std::ostream &output, const OrMap &om_) {
        output <<"RoboCompDSR::OrMap:"<<om_.id()<<"\nMap: ";
        for (const auto & kv : om_.m())
            output << kv.first << "->" << kv.second << "\n";
        output << "\nContext: "<<om_.cbase();
        return output;
    }
    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OrMap();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OrMap();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap(const OrMap &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap(OrMap &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap& operator=(const OrMap &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OrMap that will be copied.
     */
    eProsima_user_DllExport OrMap& operator=(OrMap &&x);

    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(int32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id();

    /*!
     * @brief This function copies the value in member m
     * @param _m New value to be copied in member m
     */
    eProsima_user_DllExport void m(const std::map<int32_t, AworSet> &_m);

    /*!
     * @brief This function moves the value in member m
     * @param _m New value to be moved in member m
     */
    eProsima_user_DllExport void m(std::map<int32_t, AworSet> &&_m);

    /*!
     * @brief This function returns a constant reference to member m
     * @return Constant reference to member m
     */
    eProsima_user_DllExport const std::map<int32_t, AworSet>& m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport std::map<int32_t, AworSet>& m();
    /*!
     * @brief This function copies the value in member cbase
     * @param _cbase New value to be copied in member cbase
     */
    eProsima_user_DllExport void cbase(const DotContext &_cbase);

    /*!
     * @brief This function moves the value in member cbase
     * @param _cbase New value to be moved in member cbase
     */
    eProsima_user_DllExport void cbase(DotContext &&_cbase);

    /*!
     * @brief This function returns a constant reference to member cbase
     * @return Constant reference to member cbase
     */
    eProsima_user_DllExport const DotContext& cbase() const;

    /*!
     * @brief This function returns a reference to member cbase
     * @return Reference to member cbase
     */
    eProsima_user_DllExport DotContext& cbase();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const OrMap& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    int32_t m_id;
    std::map<int32_t, AworSet> m_m;
    DotContext m_cbase;
};

#endif // _DSRGRAPH_H_