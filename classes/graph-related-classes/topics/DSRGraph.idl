
    union Val switch(long) {
      case 0:
        string str;
      case 1:
        long dec;
      case 2:
        float fl;
      case 3:
        sequence<float>  float_vec;
      //case 4:
      // sequence<float> rtmat;
      case 4:
        boolean bl;
    };

    enum Types
    {
        _STRING,
        _INT,
        _FLOAT,
        _FLOAT_VEC,
        _BOOL
       // _RT_MAT
    };

    struct _Attrib
    {
        long type;
        Val value;
    };

    struct Edge {
        long to; //key1
		string type; //key2
		long from; // Se mantiene para trabajar más fácilmente con los Edges.
		map<string, Attrib>    attrs;
	};

    struct EdgeKey {
        long to;
        string type;
    };

    struct Node {
        string type;
        string name;
        long id;
        long agent_id;
		map<string, Attrib>   attrs;
		map<EdgeKey, Edge> fano;
    };

    struct GraphRequest
    {
        string from;
    };

    struct PairInt {
        long first;
        long second;
    };


    struct DotContext {
        map<long, long> cc;
        sequence<PairInt> dc;
    };

    struct DotKernel {
        map<PairInt, Node> ds;
        DotContext cbase;
    };

    struct AworSet {
        long id;
        DotKernel dk;
    };

    struct OrMap {
        long id;
        map<long, AworSet> m;
        DotContext cbase;
    };



