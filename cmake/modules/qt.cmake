IF (NOT QT.CMAKE)
	set (QT.CMAKE TRUE)
	# QT
	option (USE_QT6 "Build with QT6" ON)
	option (USE_QT5 "Build with QT5" OFF)
	option (USE_QT4 "Build with QT4" OFF)

	# Default => Qt6 if not found tries with Qt5
	IF (USE_QT6)
		find_package(Qt6 COMPONENTS Core REQUIRED)
		IF(Qt6_FOUND)
			set (USE_QT6 ON)
			set (USE_QT5 OFF)
			set (USE_QT4 OFF)
		ELSEIF (Qt5_FOUND)
			set (USE_QT4 OFF)
			set (USE_QT5 ON)
			set (USE_QT6 OFF)
		ELSEIF (Qt4_FOUND)
			set (USE_QT4 ON)
			set (USE_QT5 OFF)
			set (USE_QT6 OFF)
		ENDIF(Qt6_FOUND)
	ENDIF (USE_QT6)

	IF (USE_QT5)
		find_package(Qt5 COMPONENTS Core)
		IF(Qt5_FOUND)
			set (USE_QT5 ON)
			set (USE_QT4 OFF)
			set (USE_QT6 OFF)
		ELSE (Qt5_FOUND)
			set (USE_QT4 ON)
			set (USE_QT5 OFF)
			set (USE_QT6 OFF)
		ENDIF(Qt5_FOUND)
	ENDIF (USE_QT5)


	IF (USE_QT4)
		MESSAGE( STATUS "COMPILING WITH QT4" )
		find_package(Qt4 REQUIRED)
		SET( QT_USE_QTSQL TRUE )
		SET( QT_USE_QTGUI TRUE )
		SET( QT_USE_QTOPENGL TRUE )
		SET( QT_USE_QTXML TRUE )
		SET( QT_USE_QTSQL TRUE )
		SET( QT_USE_QTSTATE TRUE )
		SET( QT_USE_QTSTATEMACHINE TRUE )
		INCLUDE(${QT_USE_FILE})
		
		MACRO(QT_WRAP_CPP output )
			FOREACH( input_file ${ARGN} )
				QT4_WRAP_CPP( ${output} ${input_file} )
			ENDFOREACH( input_file)
			SET_PROPERTY(SOURCE ${${output}} PROPERTY SKIP_AUTOGEN ON)
		ENDMACRO(QT_WRAP_CPP)
		
		MACRO (QT_WRAP_UI output )
			FOREACH( input_file ${ARGN} )
				MESSAGE( STATUS "Generating header file from ${input_file}")
				QT4_WRAP_UI( ${output} ${input_file} )
			ENDFOREACH( input_file)
			SET_PROPERTY(SOURCE ${${output}} PROPERTY SKIP_AUTOGEN ON)
		ENDMACRO(QT_WRAP_UI)
		
	ENDIF (USE_QT4)

	IF (USE_QT5)
		MESSAGE( STATUS "COMPILING WITH QT5" )
		find_package(Qt5 REQUIRED COMPONENTS Gui Widgets Sql Core OpenGL Xml XmlPatterns QGLViewer-qt5)
		set(QT_LIBRARIES Qt5::Gui Qt5::Core Qt5::Widgets Qt5::Sql Qt5::OpenGL Qt5::Xml Qt5::XmlPatterns Qt5::QGLViewer-qt5)

		list(APPEND SOURCES $ENV{ROBOCOMP}/classes/abstract_graphic_viewer_qt5/abstract_graphic_viewer.cpp)
		list(APPEND HEADERS $ENV{ROBOCOMP}/classes/abstract_graphic_viewer_qt5/abstract_graphic_viewer.h)
		
		MACRO(QT_WRAP_CPP output )
			FOREACH( input_file ${ARGN} )
				QT5_WRAP_CPP( ${output} ${input_file} )
			ENDFOREACH( input_file)
			SET_PROPERTY(SOURCE ${${output}} PROPERTY SKIP_AUTOGEN ON)
		ENDMACRO(QT_WRAP_CPP)
		
		MACRO (QT_WRAP_UI output )
			FOREACH( input_file ${ARGN} )
				MESSAGE( STATUS "Generating header file from ${input_file}")
				QT5_WRAP_UI( ${output} ${input_file} )
			ENDFOREACH( input_file)
			SET_PROPERTY(SOURCE ${${output}} PROPERTY SKIP_AUTOGEN ON)
		ENDMACRO(QT_WRAP_UI)
	ENDIF (USE_QT5)

	IF (USE_QT6)
		MESSAGE( STATUS "COMPILING WITH QT6" )
		

		IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
			message(STATUS "Configuring for x86_64 architecture")
			add_definitions(-I/usr/include/x86_64-linux-gnu/qt6/QtOpenGLWidgets/)
		ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
			message(STATUS "Configuring for ARM architecture")
			add_definitions(-I/usr/include/arm-linux-gnueabihf/qt6/QtOpenGLWidgets/)
		ELSE()
			message(WARNING "Unknown architecture")
		ENDIF()

		find_package(Qt6 REQUIRED COMPONENTS Gui Widgets Core OpenGL Xml Core Widgets StateMachine)
		set(QT_LIBRARIES Qt6::Gui Qt6::Core Qt6::Widgets Qt6::OpenGL Qt6::Xml Qt6::Core Qt6::Widgets Qt6::StateMachine Qt6OpenGLWidgets QGLViewer-qt6)

		LIST(APPEND SOURCES $ENV{ROBOCOMP}/classes/abstract_graphic_viewer/abstract_graphic_viewer.cpp)
		LIST(APPEND HEADERS $ENV{ROBOCOMP}/classes/abstract_graphic_viewer/abstract_graphic_viewer.h)

		MACRO(QT_WRAP_CPP output )
			FOREACH( input_file ${ARGN} )
				QT6_WRAP_CPP( ${output} ${input_file} )
			ENDFOREACH( input_file)
			SET_PROPERTY(SOURCE ${${output}} PROPERTY SKIP_AUTOGEN ON)
		ENDMACRO(QT_WRAP_CPP)

		MACRO (QT_WRAP_UI output )
			FOREACH( input_file ${ARGN} )
				MESSAGE( STATUS "Generating header file from ${input_file}")
				QT6_WRAP_UI( ${output} ${input_file} )
			ENDFOREACH( input_file)
			SET_PROPERTY(SOURCE ${${output}} PROPERTY SKIP_AUTOGEN ON)
		ENDMACRO(QT_WRAP_UI)
	ENDIF (USE_QT6)


	# Common
	SET( CMAKE_AUTOMOC ON )
	SET( CMAKE_AUTOUIC ON )
	ADD_DEFINITIONS( "-DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED -Wall -DQT_DLL -DQT_GUI_LIB -DQT_CORE_LIB" )
	
ENDIF(NOT QT.CMAKE)
